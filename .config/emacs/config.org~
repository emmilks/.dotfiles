#+TITLE: Emacs Configuration
#+PROPERTY:  header-args:emacs-lisp :tangle ./init.el
#+auto_tangle: t

* Garbage Collection
Improve emacs startup performance.
#+begin_src emacs-lisp
    (setq gc-cons-threshold (* 50 1000 1000))
#+end_src

* Package Management
Install =use-package= and set package repositories
#+begin_src emacs-lisp
  ;; Use-Package Packages
  (setq package-archives
    '(("melpa" . "https://melpa.org/packages/")
      ("elpa" . "https://elpa.gnu.org/packages/")
      ("org"   . "https://orgmode.org/elpa/")))

  ;;; BOOTSTRAP USE-PACKAGE
  (package-initialize)
  (setq use-package-always-ensure t)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile (require 'use-package))
#+end_src

* General Improvements
Make emacs suck less


#+begin_src emacs-lisp
  ;; Prevent main screen from appearing at startup
  (setq inhibit-startup-message t)
  ;; Name and email
  (setq user-full-name "Eric Milks"
      user-mail-address "emmilks@yahoo.com")

  ;; Line Numbers
  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
          term-mode-hook
          shell-mode-hook
          eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0 ))))
  ;; Change yes-or-no to y-or-n
  (defalias 'yes-or-no-p 'y-or-n-p)
  ;; Disable bell
  (setq ring-bell-function 'ignore)
  ;; Disable unneeded UI elements
  ;;(menu-bar-mode -1) Uncomment when you are comfortable with emacs
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  ;; Cleanup whitespace
  (add-hook 'before-save-hook 'whitespace-cleanup)
#+end_src

** Text Encoding
Set UTF-8 encoding everywhere
#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
#+end_src


** Auto Revert Buffer
#+begin_src emacs-lisp
  (global-auto-revert-mode t)
#+end_src

** Tabs are Spaces
#+begin_src emacs-lisp
  (setq-default tab-width 4
        indent-tabs-mode nil)
#+end_src

** Config Load
Make it easier to load/reload configuration
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.config/emacs/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+end_src

** Window Splits
Sets the focus on the new buffer after split.
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src

** Shell
#+begin_src emacs-lisp
(defvar my-term-shell "/bin/bash")
(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)

(global-set-key (kbd "<s-return>") 'ansi-term)
#+end_src

* Org
** Structure Templates
#+begin_src emacs-lisp
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python :results output"))
#+end_src

** Org Babel
#+begin_src emacs-lisp
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)))

  (setq org-confirm-babel-evaluate nil)
#+end_src

** Org Auto Tangle
#+begin_src emacs-lisp
(use-package org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode))
#+end_src

* Diminish
Lets you hide minor modes from showing in the mode line
#+begin_src emacs-lisp
(use-package diminish)
#+end_src

* Evil Mode
Set proper keybinds in Emacs
#+begin_src emacs-lisp
  (defun em/evil-hook ()
    (dolist (mode '(custom-mode
            eshell-mode
            git-rebase-mode
            erc-mode
            circe-server-mode
            circe-chat-mode
            circe-query-mode
            sauron-mode
            term-mode))
     (add-to-list 'evil-emacs-state-modes mode)))

  (use-package evil
    :init
    ;;(setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (evil-mode 1)
    :hook (evil-mode . em/evil-hook)
    :config
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  ;;; Vim Bindings Everywhere else
  (use-package evil-collection
    :after evil
    :config
    (setq evil-want-integration t)
    (evil-collection-init))
#+end_src

* Rainbow
Highlight css color in the buffer
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :hook (prog-mode . rainbow-mode))
#+end_src
Change parenthesis color based on depth
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Which Key
Keybind fill in the blank
#+begin_src emacs-lisp

  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.3))

#+end_src

* Buffers
Always kill current buffer. Let ibuffer handle the fancy stuff
#+begin_src emacs-lisp
(defun kill-current-buffer ()
  "Kills the current buffer."
  (interactive)
  (kill-buffer (current-buffer)))
(global-set-key (kbd "C-x k") 'kill-current-buffer)
(global-set-key (kbd "C-x b") 'ibuffer)
#+end_src
** Ivy
Requirement for other packages
#+begin_src emacs-lisp
  (use-package ivy)
#+end_src
** Async
Requirement for helm
#+begin_src emacs-lisp
    (use-package async
      :config
      (dired-async-mode 1))
#+end_src
** Popup
Requirement for helm
#+begin_src emacs-lisp
(use-package popup)
#+end_src
** Helm
Better everything
#+begin_src emacs-lisp
  (use-package helm
    :init
    (helm-mode 1)
    :bind
    ("M-x" . 'helm-M-x)
    ("C-x C-f" . 'helm-find-files)
    ("C-x C-b" . 'helm-buffers-list)
    :config
    ;;(require 'helm-config)
    (setq helm-autoresize-max-height 0
      helm-autoresize-min-height 40
      helm-M-x-fuzzy-match t
      helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match t
      helm-semantic-fuzzy-match t
      helm-imenu-fuzzy-match t
      helm-split-window-in-side-p nil
      helm-move-to-line-cycle-in-source nil
      helm-ff-search-library-in-sexp t
      helm-scroll-amount 8
      helm-echo-input-in-header-line t)
    (helm-autoresize-mode 1)
    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ;rebind tab to run persistent action
    (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)) ; make TAB work in terminal

  (use-package helm-projectile
    :config
    (helm-projectile-on))
#+end_src

* Theme
#+begin_src emacs-lisp
(use-package doom-themes
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  ;;(doom-themes-neotree-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

(use-package all-the-icons
  :if (display-graphic-p))

(use-package doom-modeline
  :init (doom-modeline-mode 1))
#+end_src

* Statistics/R
#+begin_src emacs-lisp
(use-package ess)
#+end_src

* Projectile
Project management
#+begin_src emacs-lisp
(use-package projectile
  :init
  (projectile-mode 1)
  :config
  ;; let projectile call make
  (global-set-key (kbd "<f5>") 'projectile-compile-project))
#+end_src

* Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-items '((recents . 5)
              (projects . 5))))
#+end_src

* Completion
#+begin_src emacs-lisp
  (use-package company
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 2)
    :hook
    (prog-mode . company-mode))
#+end_src

* Cleanup
Set gc to reasonable threshold after startup.
#+begin_src emacs-lisp
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src
