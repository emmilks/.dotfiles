#+TITLE: Emacs Configuration
#+PROPERTY:  header-args:emacs-lisp :tangle ./init.el
#+latex_header: \usepackage[margin=1in]{geometry}

* Package Management
Install =use-package= and set package repositories
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
(straight-use-package 'use-package)
#+end_src


* Diminish
#+begin_src emacs-lisp
  (use-package diminish
    :straight t)
#+end_src

* Doom Garbage Collection
Adopt a sneaky garbage collection strategy of waiting until idle
time to collect; staving off the collector while the user is
working.  Thanks Doom -
https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly

#+begin_src emacs-lisp
(use-package gcmh
  :straight t
  :diminish gcmh-mode
  :custom
  (gcmh-mode 1)
  (gcmh-idle-delay 5)
  (gcmh-high-cons-threshold (* 256 1024 1024))
  (gc-cons-percentage 0.2))
#+end_src

* General Improvements
** Keep Folders Clean
#+begin_src emacs-lisp
  (use-package no-littering
    :straight t)
#+end_src

** Emacs
Make emacs suck less
#+begin_src emacs-lisp
  (defvar em/default-font-size 115)
  (defvar em/default-variable-font-size 115)

  (use-package emacs
    :init
    (set-face-attribute 'default nil :font "Fira Code" :height em/default-font-size :weight 'regular)
    (set-face-attribute 'fixed-pitch nil :font "Fira Code" :height em/default-font-size :weight 'regular)
    (set-face-attribute 'variable-pitch nil :font "Liberation Serif" :height em/default-variable-font-size :weight 'regular)
    :config
    ;; Prevent main screen from appearing at startup
    (setq inhibit-startup-message t)
    (global-hl-line-mode)
    ;; Line Numbers
    (column-number-mode)
    (global-display-line-numbers-mode t)

    ;; Disable line numbers for some modes
    (dolist (mode '(org-mode-hook
          term-mode-hook
          info-mode-hook
          text-mode-hook
          vterm-mode-hook
          shell-mode-hook
          eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0 ))))
    (defalias 'yes-or-no-p 'y-or-n-p)
    (show-paren-mode t)
    ;; Disable bell
    (setq ring-bell-function 'ignore)
    (setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
    ;; Text Encode
    (prefer-coding-system 'utf-8)
    (set-default-coding-systems 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (global-auto-revert-mode t)    ;; Auto Revert Buffer
    (setq-default tab-width 4)    ;; Tab behavior
    (setq-default indent-tabs-mode nil) ;; Spaces instead of tabs because I am not a heathen
    (delete-selection-mode t)    ;; Start writing after deletion
    (setq-default fill-column 80)
    (setq-default frame-title-format '("%b")) ; make window title the buffer name
    ;; Increase the amount of data Emacs reads from the process
    (setq read-process-output-max (* 1024 1024))
    (setq user-emacs-directory "~/.config/emacs/")
    (setq custom-file (concat user-emacs-directory "custom.el"))
    (load-theme 'modus-vivendi t)
    :hook
    (before-save-hook . whitespace-cleanup))
    (load-file custom-file)
#+end_src

** Load Config
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.config/emacs/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+end_src
* Evil
  #+begin_src emacs-lisp
  (use-package evil
  :straight t
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

  #+end_src
#+begin_src emacs-lisp

(use-package evil-collection
  :straight t
  :after evil
  :config
  (evil-collection-init))
#+end_src

** Window Splits
Sets the focus on the new buffer after split.
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src

** Vterm
   #+begin_src emacs-lisp
  (use-package vterm
    :straight t)
   #+end_src
** Shell
Always select the bash shell when launching a terminal. Set keybind for =ansi-term=.
#+begin_src emacs-lisp
(defvar my-term-shell "/bin/bash")
(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)

(global-set-key (kbd "<s-S-return>") 'vterm)
#+end_src

* Dired
  #+begin_src emacs-lisp
    (use-package dired
      :custom
      (dired-auto-revert-buffer t)
      (dired-dwim-target t)
      (dired-hide-details-hide-symlink-targets nil)
      (dired-listing-switches "-Aghov --group-directories-first")
      (dired-kill-when-opening-new-dired-buffer t)
      (dired-recursive-copies 'always)
      :hook
      (dired-mode . auto-revert-mode)
      (dired-mode . dired-hide-details-mode))
  
  #+end_src

* Org
#+begin_src emacs-lisp
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (use-package org
      :defer t
      :config
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python :results output"))
    (add-to-list 'org-structure-template-alist '("R" . "src R"))

    (setq org-directory (expand-file-name "~/Storage/Org"))

    (setq
     ;; Edit settings
     org-auto-align-tags nil
     org-tags-column 0
     org-catch-invisible-edits 'show-and-error
     org-special-ctrl-a/e t
     org-insert-heading-respect-content t

     ;; Org styling, hide markup etc.
     org-hide-emphasis-markers t
     org-pretty-entities t
     org-ellipsis "..."
     org-adapt-indentation t
     org-hide-leading-stars t
     org-odd-levels-only t

     ;; Agenda styling
     org-agenda-tags-column 0
     org-agenda-block-separator ?-
     org-agenda-time-grid
     '((daily today require-timed)
       (800 1000 1200 1400 1600 1800 2000)
         " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
     org-agenda-current-time-string
     "⭠ now ─────────────────────────────────────────────────")

    (setq org-latex-listings 'minted
          org-latex-packages-alist '(("" "listings")
                                     ("" "color")
                                     ("" "minted"))
          org-latex-pdf-process
          '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

    ;; Org babel
      (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)
      (R . t)))

  (setq org-confirm-babel-evaluate nil)
  :hook
  (org-mode . auto-fill-mode)
  :bind
  ("C-c a" . org-agenda)
  ("C-c c" . org-capture))
#+end_src

** Org Modern
Make Org Mode a little more pretty
#+begin_src emacs-lisp
  (use-package org-modern
    :straight t
    :hook
    (org-mode . org-modern-mode)
    (org-agenda-finalize . org-modern-agenda))
#+end_src

* Rainbow
Highlight css color in the buffer
Hello
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :straight t
    :hook (prog-mode . rainbow-mode))
#+end_src
Change parenthesis color based on depth
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Which Key
Keybind fill in the blank
#+begin_src emacs-lisp
  (use-package which-key
    :straight t
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.3))
#+end_src

* Buffers
Always kill current buffer. Let ibuffer handle the fancy stuff
#+begin_src emacs-lisp
(defun kill-current-buffer ()
  "Kills the current buffer."
  (interactive)
  (kill-buffer (current-buffer)))
(global-set-key (kbd "C-x k") 'kill-current-buffer)
(global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

** Async
#+begin_src emacs-lisp
    (use-package async
      :straight t
      :config
      (dired-async-mode 1))
#+end_src

* Theme
#+begin_src emacs-lisp
  (use-package doom-themes
      :straight t
      :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
;;    (load-theme 'doom-gruvbox t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    ;;(doom-themes-neotree-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
  
  (use-package all-the-icons
      :straight t
      :if (display-graphic-p))

  (use-package all-the-icons-completion
    :straight t
    :init
    (all-the-icons-completion-mode)
    :hook
    (marginalia-mode . all-the-icons-completion-marginalia-setup))

  (use-package all-the-icons-dired
    :straight t
    :hook
    (dired-mode . all-the-icons-dired-mode))

  (use-package all-the-icons-ibuffer
    :straight t
    :hook
    (ibuffer-mode . all-the-icons-ibuffer-mode))

  (use-package doom-modeline
    :straight t
    :init (doom-modeline-mode 1))
#+end_src

* Statistics/R
#+begin_src emacs-lisp
  (use-package ess
      :straight t
      :config
      (setq ess-indent-with-fancy-comments nil))
#+end_src

* Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :straight t
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-items '((recents . 5))))
#+end_src

* Completion
** Vertico
Minimal completion engine.
#+begin_src emacs-lisp
  (use-package vertico
    :straight t
	:bind
	(:map minibuffer-local-map
	("M-h" . backward-kill-word))
    :init
    (vertico-mode))
#+end_src
** Consult
   #+begin_src emacs-lisp
	 ;; Example configuration for Consult
	 (use-package consult
	   ;; Replace bindings. Lazily loaded due by `use-package'.
	   :straight t
	   :bind (;; C-c bindings (mode-specific-map)
			  ("C-c h" . consult-history)
			  ("C-c m" . consult-mode-command)
			  ("C-c k" . consult-kmacro)
			  ;; C-x bindings (ctl-x-map)
			  ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
			  ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
			  ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
			  ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
			  ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
			  ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
			  ;; Custom M-# bindings for fast register access
			  ("M-#" . consult-register-load)
			  ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
			  ("C-M-#" . consult-register)
			  ;; Other custom bindings
			  ("M-y" . consult-yank-pop)                ;; orig. yank-pop
			  ("<help> a" . consult-apropos)            ;; orig. apropos-command
			  ;; M-g bindings (goto-map)
			  ("M-g e" . consult-compile-error)
			  ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
			  ("M-g g" . consult-goto-line)             ;; orig. goto-line
			  ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
			  ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
			  ("M-g m" . consult-mark)
			  ("M-g k" . consult-global-mark)
			  ("M-g i" . consult-imenu)
			  ("M-g I" . consult-imenu-multi)
			  ;; M-s bindings (search-map)
			  ("M-s d" . consult-find)
			  ("M-s D" . consult-locate)
			  ("M-s g" . consult-grep)
			  ("M-s G" . consult-git-grep)
			  ("M-s r" . consult-ripgrep)
			  ("M-s l" . consult-line)
			  ("M-s L" . consult-line-multi)
			  ("M-s m" . consult-multi-occur)
			  ("M-s k" . consult-keep-lines)
			  ("M-s u" . consult-focus-lines)
			  ;; Isearch integration
			  ("M-s e" . consult-isearch-history)
			  :map isearch-mode-map
			  ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
			  ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
			  ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
			  ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
			  ;; Minibuffer history
			  :map minibuffer-local-map
			  ("M-s" . consult-history)                 ;; orig. next-matching-history-element
			  ("M-r" . consult-history))                ;; orig. previous-matching-history-element

	   ;; Enable automatic preview at point in the *Completions* buffer. This is
	   ;; relevant when you use the default completion UI.
	   :hook (completion-list-mode . consult-preview-at-point-mode)

	   ;; The :init configuration is always executed (Not lazy)
	   :init

	   ;; Optionally configure the register formatting. This improves the register
	   ;; preview for `consult-register', `consult-register-load',
	   ;; `consult-register-store' and the Emacs built-ins.
	   (setq register-preview-delay 0.5
			 register-preview-function #'consult-register-format)

	   ;; Optionally tweak the register preview window.
	   ;; This adds thin lines, sorting and hides the mode line of the window.
	   (advice-add #'register-preview :override #'consult-register-window)

	   ;; Use Consult to select xref locations with preview
	   (setq xref-show-xrefs-function #'consult-xref
			 xref-show-definitions-function #'consult-xref)

	   ;; Configure other variables and modes in the :config section,
	   ;; after lazily loading the package.
	   :config

	   ;; Optionally configure preview. The default value
	   ;; is 'any, such that any key triggers the preview.
	   ;; (setq consult-preview-key 'any)
	   ;; (setq consult-preview-key (kbd "M-."))
	   ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))
	   ;; For some commands and buffer sources it is useful to configure the
	   ;; :preview-key on a per-command basis using the `consult-customize' macro.
	   (consult-customize
		consult-theme
		:preview-key '(:debounce 0.2 any)
		consult-ripgrep consult-git-grep consult-grep
		consult-bookmark consult-recent-file consult-xref
		consult--source-bookmark consult--source-recent-file
		consult--source-project-recent-file
		:preview-key (kbd "M-."))

	   ;; Optionally configure the narrowing key.
	   ;; Both < and C-+ work reasonably well.
	   (setq consult-narrow-key "<") ;; (kbd "C-+")

	   ;; Optionally make narrowing help available in the minibuffer.
	   ;; You may want to use `embark-prefix-help-command' or which-key instead.
	   ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

	   ;; By default `consult-project-function' uses `project-root' from project.el.
	   ;; Optionally configure a different project root function.
	   ;; There are multiple reasonable alternatives to chose from.
	   ;;;; 1. project.el (the default)
	   ;; (setq consult-project-function #'consult--default-project--function)
	   ;;;; 2. projectile.el (projectile-project-root)
	   ;; (autoload 'projectile-project-root "projectile")
	   ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
	   ;;;; 3. vc.el (vc-root-dir)
	   ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
	   ;;;; 4. locate-dominating-file
	   ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
	 )
   #+end_src

** Embark
   #+begin_src emacs-lisp
  (use-package embark
    :straight t

    :bind
    (("s-." . embark-act)         ;; pick some comfortable binding
     ("s-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))
  
  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :straight t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
   #+end_src
** Savehist
Persistent history over Emacs restarts. Vertico sorts by history position
#+begin_src emacs-lisp
  (use-package savehist
    :straight t
    :init
    (savehist-mode))
#+end_src

** Orderless
#+begin_src emacs-lisp
  (use-package orderless
    :straight t
    :init
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+end_src
** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :straight t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+end_src
** Corfu
Completion engine that stays true to Emacs.
#+begin_src emacs-lisp
  ;; Auto completion example
  (use-package corfu
    :straight t
    :custom
    (corfu-auto t)          ;; Enable auto completion
    ;; (corfu-separator ?_) ;; Set to orderless separator, if not using space
    (corfu-cycle t)             ;; Enable cycling for `corfu-next/previous'
    (corfu-preselect-first nil) ;; Disable candidate preselection
    (corfu-auto-prefix 2)
    (corfu-auto-delay 0.2)
    (corfu-quit-at-boundary 'separator)
    (corfu-preview-current 'insert)
    :bind (:map corfu-map
		("M-SPC" . corfu-insert-separator)
		("TAB"     . corfu-next)
		([tab]     . corfu-next)
		("S-TAB"   . corfu-previous)
		([backtab] . corfu-previous)
		("S-<return>" . corfu-insert)
		("RET"     . nil) ;; leave my enter alone!
		)
    ;; Another key binding can be used, such as S-SPC.
    ;; (:map corfu-map ("M-SPC" . corfu-insert-separator))
    :init
    (global-corfu-mode))
#+end_src
* Development
** Magit
   #+begin_src emacs-lisp
     (use-package magit
       :straight t
       :defer t
       :bind ("C-x g" . magit-status)
       :commands (magit-status magit-get-current-branch)
       :custom
       (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
   #+end_src
** Flycheck
   #+begin_src emacs-lisp
     (use-package flycheck
       :straight t
       :init
       (global-flycheck-mode)
       :config
       (setq flycheck-check-syntax-automatically '(mode-enabled save)))
   #+end_src
** Python
*** Python Mode
   #+begin_src emacs-lisp
  (use-package python-mode
    :straight t
    :config
    ;; Remove guess indent python message
    (setq python-indent-guess-indent-offset-verbose nil)
    (setq python-shell-interpreter "ipython3"
          python-shell-interpreter-args "-i --simple-prompt --InteractiveShell.display_page=True"))
   #+end_src
*** Blacken
	#+begin_src emacs-lisp
	  (use-package blacken
		:straight t
		:defer t
		:hook (python-mode . blacken-mode))
	#+end_src
*** Highlight-Mode-Line
    #+begin_src emacs-lisp
      (use-package hide-mode-line
	:straight t
	:defer t
	:hook ((inferior-python-mode . hide-mode-line-mode)
	       (inferior-ess-r-mode . hide-mode-line-mode)))
    #+end_src
*** Poetry
    #+begin_src emacs-lisp
  (use-package poetry
    :straight t)
    #+end_src
*** Pyvenv
    #+begin_src emacs-lisp
  (use-package pyvenv
    :straight t)
    #+end_src



** Haskell
#+begin_src emacs-lisp
  (use-package haskell-mode
    :straight t)
#+end_src
** Eglot
   #+begin_src emacs-lisp
  (use-package eglot
    :straight t
    :hook
    (python-mode . eglot-ensure))
   #+end_src
* Markup
** Auctex
   #+begin_src emacs-lisp
  (use-package auctex
    :straight t
    :defer t)
   #+end_src
** Markdown
   #+begin_src emacs-lisp
  (use-package markdown-mode
    :straight t
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown"))
   #+end_src
* Snippets

** Yasnippets
   #+begin_src emacs-lisp
  (use-package yasnippet
    :straight t
    :config
    (setq yas-snippet-dirs '("~/.config/emacs/snippets/"))
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :straight t
    :after yasnippet)
   #+end_src
* Tree Sitter
  #+begin_src emacs-lisp
  (use-package tree-sitter
    :straight t
    :config
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

  (use-package tree-sitter-langs
    :straight t
    :after tree-sitter)

  (use-package tree-sitter-ess-r
    :straight t
    :after tree-sitter
    :config
    (add-hook 'ess-r-mode-hook 'tree-sitter-ess-r-mode-activate))

  #+end_src
