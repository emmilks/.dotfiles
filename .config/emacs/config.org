#+TITLE: Emacs Configuration
#+PROPERTY:  header-args:emacs-lisp :tangle ./init.el
#+auto_tangle: t

* Package Management
Install =use-package= and set package repositories
#+begin_src emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
(straight-use-package 'use-package)
#+end_src
* Diminish
#+begin_src emacs-lisp
  (use-package diminish
    :straight t)
#+end_src

* Doom Garbage Collection
Adopt a sneaky garbage collection strategy of waiting until idle
time to collect; staving off the collector while the user is
working.  Thanks Doom -
https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly

#+begin_src emacs-lisp
(use-package gcmh
  :straight t
  :diminish gcmh-mode
  :custom
  (gcmh-mode 1)
  (gcmh-idle-delay 5)
  (gcmh-high-cons-threshold (* 256 1024 1024))
  (gc-cons-percentage 0.2))
#+end_src

* General Improvements
** Keep Folders Clean
#+begin_src emacs-lisp
  (use-package no-littering
    :straight t)
#+end_src

** Emacs
Make emacs suck less
#+begin_src emacs-lisp
  (defvar em/default-font-size 115)
  (defvar em/default-variable-font-size 115)

  (use-package emacs
    :init
    (set-face-attribute 'default nil :font "Fira Code" :height em/default-font-size :weight 'regular)
    (set-face-attribute 'fixed-pitch nil :font "Fira Code" :height em/default-font-size :weight 'regular)
    (set-face-attribute 'variable-pitch nil :font "Liberation Serif" :height em/default-variable-font-size :weight 'regular)
    :config
    ;; Prevent main screen from appearing at startup
    (setq inhibit-startup-message t)
    ;; Line Numbers
    (column-number-mode)
    (global-display-line-numbers-mode t)

    ;; Disable line numbers for some modes
    (dolist (mode '(term-mode-hook
          shell-mode-hook
          eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0 ))))
    (setq use-short-answers t)
    (show-paren-mode t)
    ;; Disable bell
    (setq ring-bell-function 'ignore)
    (setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
    ;; Text Encode
    (prefer-coding-system 'utf-8)
    (set-default-coding-systems 'utf-8)
    (set-terminal-coding-system 'utf-8)
    (set-keyboard-coding-system 'utf-8)
    (global-auto-revert-mode t)    ;; Auto Revert Buffer
    (setq-default tab-width 4)    ;; Tab behavior
    (setq-default indent-tabs-mode nil) ;; Spaces instead of tabs because I am not a heathen
    (delete-selection-mode t)    ;; Start writing after deletion
    (setq-default fill-column 80)
    (setq-default frame-title-format '("%b")) ; make window title the buffer name
    ;; Increase the amount of data Emacs reads from the process
    (setq read-process-output-max (* 1024 1024))
    (setq user-emacs-directory "~/.config/emacs/")
    (setq custom-file (concat user-emacs-directory "custom.el"))
    :hook
    (before-save-hook . whitespace-cleanup))
    (load-file custom-file)
#+end_src

** Improved Kill Word
Bring some Vim functionality to Emacs. Kill inner word.
   #+begin_src emacs-lisp
   (defun em/kill-inner-word ()
  "Kills the entire word your cursor is in. Equivalent to 'ciw' in vim."
  (interactive)
  (forward-char 1)
  (backward-word)
  (kill-word 1))
(global-set-key (kbd "C-c w k") 'em/kill-inner-word)
   #+end_src

** Load Config
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.config/emacs/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+end_src

** Window Splits
Sets the focus on the new buffer after split.
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+end_src

** Shell
Always select the bash shell when launching a terminal. Set keybind for =ansi-term=.
#+begin_src emacs-lisp
(defvar my-term-shell "/bin/bash")
(defadvice ansi-term (before force-bash)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)

(global-set-key (kbd "<s-return>") 'ansi-term)
#+end_src

* Org
** Structure Templates
#+begin_src emacs-lisp
  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python :results output"))
#+end_src

** Org Babel
#+begin_src emacs-lisp
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)))

  (setq org-confirm-babel-evaluate nil)
#+end_src

** Org Auto Tangle
#+begin_src emacs-lisp
(use-package org-auto-tangle
  :straight t
  :defer t
  :hook (org-mode . org-auto-tangle-mode))
#+end_src

* Rainbow
Highlight css color in the buffer
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :straight t
    :hook (prog-mode . rainbow-mode))
#+end_src
Change parenthesis color based on depth
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :straight t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Which Key
Keybind fill in the blank
#+begin_src emacs-lisp
  (use-package which-key
    :straight t
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 0.3))
#+end_src

* Buffers
Always kill current buffer. Let ibuffer handle the fancy stuff
#+begin_src emacs-lisp
(defun kill-current-buffer ()
  "Kills the current buffer."
  (interactive)
  (kill-buffer (current-buffer)))
(global-set-key (kbd "C-x k") 'kill-current-buffer)
(global-set-key (kbd "C-x b") 'ibuffer)
#+end_src

** Async
#+begin_src emacs-lisp
    (use-package async
      :straight t
      :config
      (dired-async-mode 1))
#+end_src

* Theme
#+begin_src emacs-lisp
(use-package doom-themes
    :straight t
    :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  ;;(doom-themes-neotree-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

(use-package all-the-icons
    :straight t
    :if (display-graphic-p))

(use-package doom-modeline
  :straight t
  :init (doom-modeline-mode 1))
#+end_src

* Statistics/R
#+begin_src emacs-lisp
(use-package ess
    :straight t)
#+end_src

* Projectile
Project management
#+begin_src emacs-lisp
(use-package projectile
  :straight t
  :init
  (projectile-mode 1)
  :config
  ;; let projectile call make
  (global-set-key (kbd "<f5>") 'projectile-compile-project))
#+end_src

* Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :straight t
  :config
  (dashboard-setup-startup-hook)
  (setq dashboard-items '((recents . 5)
              (projects . 5))))
#+end_src

* Completion
** Vertico
Minimal completion engine.
#+begin_src emacs-lisp
  (use-package vertico
    :straight t
    :init
    (vertico-mode))
#+end_src

** Savehist
Persistent history over Emacs restarts. Vertico sorts by history position
#+begin_src emacs-lisp
  (use-package savehist
    :straight t
    :init
    (savehist-mode))
#+end_src

** Orderless
#+begin_src emacs-lisp
  (use-package orderless
    :straight t
    :init
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))
#+end_src
** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :straight t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package company
    :straight t
    :config
    (setq company-idle-delay 0.3)
    (setq company-minimum-prefix-length 3)
    (global-company-mode))
#+end_src
* Development
** Python
